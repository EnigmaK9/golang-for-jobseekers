### Golang basic types ###
numbers
boolean
string
byte
list
maps
### Booleans ###
valBoolTrue := True
valBooltrue := false
### Strings ###
varString := "TestVariable"
### List ###
primes := [6]int{2, 3, 5, 7, 11, 13}
### Slice ###
primes:= []int{2, 3, 5, 7 , 11}
primes := []int{2, 3, 5, 7, 11, 2}
primesMiddle := primes[2:4]
primesFront := primes[:3]
primesBack := priems[3:]

// Printing of variables via fmt.Println
// [5 7]
primes := make([]int, 6)
fmt. Println(primes)
primes[0] = 2
primes[1] = 3
fmt.Println(primes)
###Maps###
mappedItems := map[string]string{}
mappedItems["test"] = "test"

mappedItems := make(map[string]string])
mappedItems["test"] = "test"
#functions#
func exampleFunc(){
    fmt.Println("exampleFunc")
    }
fmt.Println("anotherExampleFunc")
a := 10
if a == 10 {
    fmt.Println("Hello from func")
    return
    }
fmt.Println("Bye")
}

package main
import "fmt"
func main(a string, b int) {
    fmt.Println(a)
    fmt.Println(b)
    }
func exampleFunc(a bool, b string, c string, d int, e int){
    fmt.Println(a)
    fmt.Println(b)
    }
func exampleFunc(s string) stirng {
    return s
    }
----------
x, y := exampleFunc("test")
fmt.Println(x)
fmt.Println(y)
----------
_, y := exampleFunc("test")
----------
type TestStruct struct {
    Sample string
    SampleInt in    Sample string
    SampleInt intt
}
----------
testVar := TestStruct{Sample: "aa", SampleInt: 1}
testVar := TestStruc{"aa", 1}
----------
testVar := TestStruct {1, "aa"}
# Errors:
##
type TestStruct struct {
Sample string 'json:"sample"'
SampleInt int 'json:"sample_int"'
    }
package main
import "fmt"
func main() {
    l := LoveMessagePrinter{}
    PrintSomething(1)
    }
func main() {
    t := TroubleMessagePrinter{}
    PrintSomething(t)
    }
###loops###
package main
import "fmt"
func main() {
    allTasks := []Subtask{Subtask{Status: "incomplete"}, Subtask{Status:
    "completed"}
        }
    }
type Subtask struct {
    }
